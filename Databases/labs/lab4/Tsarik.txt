--Лабораторная выполняется в СУБД  Oracle. 
--Cкопируйте файл  EDU4.sql  в каталог C:\TEMP .
--Раскройте файл и ознакомтесь со скриптом создания и заполнения таблиц для выполнения лабораторной. 
--Таблица Emp имеет дополнительные столбцы mstat (семейное положение), Nchild (количество несовершеннолетних детей).  
--Произведите запуск SQLPlus, PLSQLDeveloper или другой системы работы с Oracle и соеденитесь с БД.  Запустите скрипты EDU4.sql на выполнение.
--Вставте в эту строку Ваши ФИО, номер группы, курса. ФИО Царик Виталий Александрович, группа 2, курс 4.      
--Файл с отчётом о выполнении лабораторной создаётся путём вставки скриптов, созданных Вами программ после пунктов 1, 2.
--Файл отчёта именуется фамилией студента  в английской транскрипции, с расширением .txt и сохраняется в каталог.

--1. Создайте пакет, включающий в свой состав процедуру ChildBonus и функцию EmpChildBonus. 
--Процедура ChildBonus должна вычислять ежегодную добавку к 
--зарплате сотрудников на детей за 2019 год и заносить её в виде дополнительной премии в первом месяце (январе) следующего 2020
--календарного года в поле Bonvalue таблицы Bonus. 
--В качестве параметров процедуре передаются проценты в зависимости от количества детей (см. правило начисления добавки).
--Функция EmpChildBonus должна вычислять ежегодную добавку за 2019 год на детей к  зарплате конкретного сотрудника 
--(номер сотрудника - параметр передаваемый функции) без занесения в таблицу.

-ПРАВИЛО ВЫЧИСЛЕНИЯ ДОБАВКИ

--Добавка к заработной плате на детей  вычисляется только для работавших в декабре 2019 году сотрудников по следующему правилу: 
--добавка равна X% от суммы должностного месячного оклада (поле minsalary таблицы job) по занимаемой в декабре 2019 года должности и всех начисленных 
--за 2019 год премий (поле bonvalue таблицы bonus), где:
--X% равны X1% , если сотрудник имеет одного ребёнка;
--X% равны X2% , если сотрудник имеет двух детей;
--X% равны X3% , если сотрудник имеет трёх и более детей.
--X1%<X2%<X3%  являются передаваемыми процедуре и функции параметрами. Кроме этого, функции в качестве параметра передаётся номер сотрудника (empno). 

CREATE OR REPLACE PACKAGE ChildBonusPackage AS FUNCTION EmpChildBonus(employee IN INTEGER, x1 IN REAL, x2 IN REAL, x3 IN REAL) RETURN REAL;
PROCEDURE ChildBonus(x1 IN REAL, x2 IN REAL, x3 IN REAL);
END ChildBonusPackage;
/
CREATE OR REPLACE PACKAGE BODY ChildBonusPackage AS
	PROCEDURE ChildBonus(x1 IN REAL, x2 IN REAL, x3 IN REAL) IS
		CURSOR child_bonus_cursor IS
		SELECT salaryempno,
		       nvl(salary, 0) + nvl(bonusearnings, 0)
		FROM
		  ( SELECT career.empno AS salaryempno,
		           nvl(sum(nvl(minsalary, 0)), 0) AS salary
		   FROM career
		   JOIN job ON job.jobno = career.jobno
		   WHERE ( extract(YEAR
		                   FROM career.startdate) <= 2019 )
		     AND ( ( career.enddate IS NULL )
		          OR ( ( extract(YEAR
		                         FROM career.enddate) = 2019 )
		              AND ( extract(MONTH
		                            FROM career.enddate) = 12 ) )
		          OR ( extract(YEAR
		                       FROM career.enddate) > 2019 ) )
		   GROUP BY career.empno )
		LEFT OUTER JOIN
		  ( SELECT empno AS bonusempno,
		           nvl(sum(nvl(bonvalue, 0)), 0) AS bonusearnings
		   FROM bonus
		   WHERE bonus.year = 2019
		   GROUP BY empno ) ON salaryempno = bonusempno;

		employee INTEGER := 0;
		earnings REAL := 0;
		children INTEGER := 0;
		child_bonus REAL := 0;

		BEGIN 
      OPEN child_bonus_cursor;
      LOOP 
        FETCH child_bonus_cursor INTO employee, earnings;
        EXIT WHEN child_bonus_cursor % NOTFOUND;

        SELECT nchild INTO children
        FROM emp
        WHERE empno = employee;

        IF (children > 0) THEN 
          IF children = 1 THEN child_bonus := earnings * x1 / 100;
            ELSIF children = 2 THEN child_bonus := earnings * x2 / 100;
            ELSIF children > 2 THEN child_bonus := earnings * x3 / 100;
          END IF;

        INSERT INTO bonus
        VALUES (employee, 1, 2020, child_bonus, NULL);

        END IF;
      END LOOP;
		CLOSE child_bonus_cursor;
	END ChildBonus;

	FUNCTION EmpChildBonus(
		employee IN INTEGER, x1 IN REAL, x2 IN REAL, x3 IN REAL
	) RETURN REAL IS bonusearnings REAL := 0;

	salary REAL := 0;
	total REAL := 0;
	children INTEGER := 0;
	child_bonus REAL := 0;

	BEGIN 
		BEGIN
		SELECT nvl(sum(nvl(bonvalue, 0)), 0) INTO bonusearnings
		FROM bonus
		WHERE empno = employee
		  AND bonus.year = 2015
		GROUP BY empno;
		EXCEPTION WHEN no_data_found THEN bonusearnings := 0;
		END;

		BEGIN
		SELECT nvl(sum(nvl(minsalary, 0)), 0) INTO salary
		FROM career
		JOIN job ON job.jobno = career.jobno
		WHERE ( career.empno = employee )
		  AND ( extract(YEAR
		                FROM career.startdate) <= 2019 )
		  AND ( ( career.enddate IS NULL )
		       OR ( ( extract(YEAR
		                      FROM career.enddate) = 2019 )
		           AND ( extract(MONTH
		                         FROM career.enddate) = 12 ) )
		       OR ( extract(YEAR
		                    FROM career.enddate) > 2019 ) )
		GROUP BY career.empno;
		EXCEPTION WHEN no_data_found THEN salary := 0;
		END;

		BEGIN
		SELECT nchild INTO children
		FROM emp
		WHERE empno = employee;
		EXCEPTION WHEN no_data_found THEN children := 0;
		END;

		total := bonusearnings + salary;

		IF children = 1 THEN child_bonus := total * x1 / 100;
		ELSIF children = 2 THEN child_bonus := total * x2 / 100;
		ELSIF children > 2 THEN child_bonus := total * x3 / 100;
		END IF;

		RETURN child_bonus;
	END EmpChildBonus;
END ChildBonusPackage;

--2. Создайте триггер, который при добавлении или обновлении записи в таблице EMP 
-- должен отменять действие и сообщать об ошибке:
--a) если для сотрудника с семейным положением холост (s)  в столбце Nchild указывается не нулевое количество детей или NULL:;
--b) если для любого сотрудника указывается отрицательное количество детей или Null.

CREATE OR REPLACE TRIGGER emp_trigger
BEFORE INSERT OR UPDATE ON emp
FOR EACH ROW
BEGIN
  IF (:new.mstat = 's' AND (:new.nchild IS NULL OR :new.nchild != 0))
  THEN RAISE_APPLICATION_ERROR(-20001, 'number of childrens have to be 0 for person who is single');
  END IF;

  IF (:new.nchild IS NULL OR :new.nchild < 0)
  THEN RAISE_APPLICATION_ERROR(-20002, 'number of childrens can not be NULL or less than 0');
  END IF;
END;
